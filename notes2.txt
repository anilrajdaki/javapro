Types of data types

1) primitive types or non reference/object types.
int, long, short, double,byte,float, char, boolean

2) non primitive types or reference/object types.
String, arrays, customized data types/ user defined data types

int age = 22;
String name = "yugi";
char gender = 'm';
double balance = 25000.00;
Boolean ismarried = false;
string address = "Hyderabad";
long phone = 7659937870l;

what is class ?

group of objects
blueprint of an object.
logical entity

what is object?

real world entity.
physical entity
an instance of an class.

class phone{

int size;
string model;
string battery;
string display_type, ram, storage;
}

way of creating an object :

class_name ref_name = new class_name();



types of variables:

1) instance variables

the variable which is related to an instance/object is called instance/object variable. 
for each and every object there is a separate copy will be available.

Ex:
class MyClass{
   String value;
   int data;
}

2) local variables:

the variables which is declared inside a block(within the braces), teh scope of them is limited to that specific block.

Ex:  public static void main(String[] args){
        int value = 20;  // local variable
}
the scope of value is only to main method.

3) Global/static variable : the variables which is declared as static is called static variable. 
these variables are class level variables, these are available for all the objects.

java identifiers

1, class 
2, variables
3, methods

rules:
1, should not start with number, but can use in anywhere else between 

  int 3val =3; not valid
  int val23 =3; valid

2, should not use special characters, except $,_

3, can start with $, _

4, cannot use keywords.


naming conventions:

1) use proper names for your identifiers

2) camel case: for variables and methods
   EX : int customerId; String customerName;

   pascal case : first letter should be capital(classes)
   Ex: class CustomerDetails;
  
   snakecase : every word is separated with a underscore
   Ex: int order_id; generally used in dbms.








